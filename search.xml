<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[在机器学习中数据不平衡问题的解决]]></title>
    <url>%2F2018%2F11%2F25%2F%E5%9C%A8%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%AD%E6%95%B0%E6%8D%AE%E4%B8%8D%E5%B9%B3%E8%A1%A1%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%2F</url>
    <content type="text"><![CDATA[在机器学习中数据不平衡问题的解决 出处： https://www.cnblogs.com/zhaokui/p/5101301.html 例子：在所有的微博对应的评论数量划分为1到5这5个等级。 1少5多。 大部分的评论都很少，极少数的微博评论会非常的多。 如果我们要对一些微博的评论数量进行预测。 只要全部预测为1，就能够得到非常高的准确率， 显然这样的预测是没有意义的。 将问题分为4个类别 数据量 分布是否均匀 大 均匀 大 不均匀 小 均匀 小 不均匀 注： 当每个类别的数据量大于5000 个以上的时候，正负样本数量相差一个量级是能够接受的（经验之谈）。 主要的解决方法 采样 方法 做法 问题 解决方法 上采样 小样本复制多分 过拟合 加入随机扰动 下采样 剔除一部分大样本 信息损失 EasyEnsemble)：多次放回的独立采样构建多个独立的模型，然后将多个模型进行组合 BalanceCascade: 在EasyEnsemble的基础上前面训练得到的模型预测准确的样本不放回。NearMiss: 利用KNN挑选出最具代表性的大众样本 数据合成 SMOT 方法： 对于小众样本 $x_i \in S_{min}$ 从它的 k 近邻中随机选取一个点$\hat{x}$。 生成新的小众样本 $x_{new}=x_i + (\hat{x}-x_i) \times \delta$ , 其中 $\delta \in [0,1]$ 是一个随机数。 存在的问题： 1. 增加了类之间重叠的可能性。 2. 生成了一些没有提供有益信息的样本。 下面两种方法用来解决这些问题。 Borderline-SMOTE只对小众样本中那些 k 近邻中大部分是大众样本的点通过SMOTE生成新样本。 因为这些样本往往是边界样本 ADASYN 首先计算每个小众样本在需要使整个数据集达到平衡时需要增加的数据量记为 $G$. 再计算对于具体的一个小众样本中每个点需要生成的样本占 $G$ 的比例。 $$\mathcal{T}i = \frac{\Delta{ik}}{\sum_i \Delta_{ik}} $$ 其中的$\Delta_{ik}$ 是第$i$ 个样本点中$k$近邻中大众样本的个数。 计算小众样本中每个点需要利用SMOT方法生成的点的个数： $g_i = \mathcal{T}_i \times G$ 加权 对于不同的类别分成其他的类别时对应的损失是不同的。 将 $c(i,j)$ 视为是把真实样本类别为 $j$ 的时候分类成 $i$ 时的损失。 该方法的难点在于如何确定 $c(i,j)$. 一分类 当正负样本分布及其不均匀的时候，可以将这个模型看成是一分类或者异常检测的问题。 其中经典的工作包括 One-class SVM 。 方法的选择正负样本均很少： 数据合成 正负样本比例悬殊：-分类 数据量还行，比例不是特别悬殊： 采样和加权的方法 采样和加权在数学上等价，但是实际中在计算资源合适的情况下，采样会好一点。 有空可以看看 Learning from Imbalanced Data 这篇综述。]]></content>
      <categories>
        <category>others</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>数据不平衡</tag>
        <tag>SMOT</tag>
        <tag>Border-line SMOT</tag>
        <tag>ADASYN</tag>
        <tag>采样， 加权， 一分类</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[这是一篇对 hexo 中对 markdown 中各种格式支持的实验]]></title>
    <url>%2F2018%2F11%2F25%2Fmarkdown_test%2F</url>
    <content type="text"><![CDATA[这是一篇对 hexo 中对各种格式支持的实验 添加图片 公式 插入公式 $\frac{1}{2}=0.5$ ,$$ \begin{align} y &amp;= \sigma (W[x,y]+b)\ x &amp;= 0 \end{align}$$ 插入表格 表头1 表头2 表头3 表头4 默认左对齐 左对齐 居中对其 右对齐 默认左对齐 左对齐 居中对其 右对齐 默认左对齐 左对齐 居中对其 右对齐 高亮：==哈哈哈哈== 删除线：哈哈哈 代码： import tensorflow as tf if __name__ == &quot;__main__&quot;: sum = 0 for i in range(101, 200): flag = True for j in range(2，i//2+1: if i%j == 0: flag = False break if flag: sum += 1 print(sum) [^]: 这是一段脚注 这是一段引用 a b]]></content>
      <categories>
        <category>others</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[利用hexo 和 github 搭建自己的博客 （Windows）]]></title>
    <url>%2F2018%2F11%2F23%2F2018_11_23_hexo_blog%2F</url>
    <content type="text"><![CDATA[利用hexo 和 github 搭建自己的博客 （Windows） 安装Node.js 和 Node.js 环境 下载 Node.js 安装，可以直接选择添加环境变量 cmd 输入 node -v 会显示版本信息 安装 github win_git 下载很慢 打开cmd 输入 git –version 会显示 github 的版本信息 在github 中创建一个新的repository(仓库) 仓库名称的后缀名称必须是XX.github.io， 这里的名称应该是自己github 的名字（其他的不清楚会怎么样） Initialize this repository with a README 这个选项需要勾选 创建好之后， 找到sittings 按钮， 向下拉， 看到有个网站。如果没有的话需要将source 改为master branch. 主题也可以选一个，这个主题是readme对应的markdown 文件显示的主题。 然后点开， 你可以看到readme 中的一些内容了。 安装Hexo 创建一个文件夹 cd 到该目录下，将Hexo 安装在该目录下。 npm install hexo -g 安装 Hexo. （npm命令是安装node.js 的时候装上的。） hexo -v 可以确定安装成功与否 初始化该文件夹： hexo install （需要一点时间） 安装所需组件：npm install hexo g (我猜是编译吧) hexo s (启动服务器); 更具提示输入网址，可以进入初始页面。 如果进不去可能是端口被占用了通过如下方法修改端口号。 Ctrl +C 停止服务 hexo server -p 5000 (最后面那个是端口号) 将Hexo 和 github page 联系起来。 （下面这些步骤用git bash here 打开， git 安装好以后鼠标右键就有了） 如果是第一次的话，需要设置 git 的 user name 和 email (将本地的git 指定自己的账户) git config –global user.name “XXXX” , XXXX 是自己github 的用户名 git config –global user.email “XXXX”, XXXX是自己github的邮箱 利用ssh 和邮件生成秘钥和密匙。 cd ~/.ssh ssh-keygen -t rsa -C “XXXX@qq.com” 在C:\Users\Administrator.ssh 下面会得到两个文件， id_rsa和id_rsa.pub 添加密钥到ssh-agent: eval “$(ssh-agent -s)” 添加生成的SSH key到ssh-agent: ssh-add ~/.ssh/id_rsa 登录Github，点击头像下的settings，添加ssh 新建一个new ssh key，将id_rsa.pub文件里的内容复制到key中, Title 的内容可以随便填。 验证是否成功： ssh -T git@github.com 看到Hi 后面的内容表明成功了。Administrator@4H516J30FXZVCK3 MINGW64 /e/blog $ ssh -T git@github.com Hi hekang123456! You&#39;ve successfully authenticated, but GitHub does not provide shell access. 配置Hexo 和 git 之间建立连接 打开 _config.yml 修改最后的内容是deploy: type: git repository: git@github.com:hekang123456/hekang123456.github.io.git branch: master repository 中的内容可以直接在 github 中对应的仓库中点下载， 选user SSH 复制下载中的连接地址 新建一篇博客 新建一篇博客，实际上是新建了一个markdown 在 “source/_posts/” 文件下面： hexo new post “hello word2！” 部署前安装一些扩展： npm install hexo-deployer-git –save 生成博客并且部署： hexo d -g 查看显示的博客内容： https:// XXXX.github.io]]></content>
      <categories>
        <category>others</category>
      </categories>
  </entry>
</search>
